import org.apache.tools.ant.filters.ReplaceTokens

plugins {
    id "org.jetbrains.kotlin.jvm" version "1.9.24"
    id "fabric-loom" version "1.5-SNAPSHOT"
    id "io.github.p03w.machete" version "2.0.1"
}

group = project.maven_group
version = project.mod_version

repositories {
    // YamlConfiguration
    maven { url "https://oss.sonatype.org/content/repositories/releases" }

    // Fabric Permissions API & Kord Snapshots
    maven { url "https://oss.sonatype.org/content/repositories/snapshots" }
}

dependencies {
    minecraft "com.mojang:minecraft:$minecraft_version"
    mappings "net.fabricmc:yarn:$yarn_mappings:v2"
    modImplementation "net.fabricmc:fabric-loader:$loader_version"

    modImplementation "net.fabricmc.fabric-api:fabric-api:$fabric_version"
    modImplementation "net.fabricmc:fabric-language-kotlin:$fabric_kotlin_version"
    modImplementation "me.lucko:fabric-permissions-api:$fabric_permissions_api_version"

    implementation include("org.bspfsystems:yamlconfiguration:$yaml_config_version")
    implementation include("dev.kord:kord-core:$kord_version")

    // Kord JVM
    include "dev.kord.cache:cache-api-jvm:$kord_cache_version"
    include "dev.kord.cache:cache-map-jvm:$kord_cache_version"
    include "dev.kord:kord-common-jvm:$kord_version"
    include "dev.kord:kord-core-jvm:$kord_version"
    include "dev.kord:kord-gateway-jvm:$kord_version"
    include "dev.kord:kord-rest-jvm:$kord_version"

    // Ktor JVM (needed by Kord)
    include "io.ktor:ktor-client-cio-jvm:$ktor_version"
    include "io.ktor:ktor-client-content-negotiation-jvm:$ktor_version"
    include "io.ktor:ktor-client-core-jvm:$ktor_version"
    //    include "io.ktor:ktor-client-websockets-jvm:$ktor_version" // not needed so far
    include "io.ktor:ktor-events-jvm:$ktor_version"
    include "io.ktor:ktor-http-cio-jvm:$ktor_version"
    include "io.ktor:ktor-http-jvm:$ktor_version"
    include "io.ktor:ktor-io-jvm:$ktor_version"
    include "io.ktor:ktor-network-jvm:$ktor_version"
    include "io.ktor:ktor-network-tls-jvm:$ktor_version"
    include "io.ktor:ktor-serialization-jvm:$ktor_version"
    include "io.ktor:ktor-serialization-kotlinx-json-jvm:$ktor_version"
    include "io.ktor:ktor-serialization-kotlinx-jvm:$ktor_version"
    include "io.ktor:ktor-utils-jvm:$ktor_version"
    //    include "io.ktor:ktor-websocket-serialization-jvm:$ktor_version" // not needed so far
    include "io.ktor:ktor-websockets-jvm:$ktor_version"

    // Kotlin Logging JVM (mu.KotlinLogging) needed by Kord Rest
    include "io.github.oshai:kotlin-logging-jvm:${project.kotlin_logging_version}"
    include "io.github.microutils:kotlin-logging-jvm:${project.mu_logging_version}"

    // Stately JVM (needed by Kord Cache)
    //    include "co.touchlab:stately-concurrency-jvm:$stately_version" // not needed so far
    include "co.touchlab:stately-concurrent-collections-jvm:$stately_version"
    //    include "co.touchlab:stately-strict-jvm:$stately_version" // not needed so far
}

base {
    archivesName = project.archives_base_name
}

processResources {
    inputs.property "version", project.version

    filesMatching("fabric.mod.json") {
        expand "version": project.version,
                "minecraft_version": minecraft_version,
                "fabric_kotlin_version": fabric_kotlin_version
    }

    filesMatching("config.yml") {
        filter(ReplaceTokens, beginToken: "\${", endToken: "}", tokens: [
            "version": project.version
        ])
    }
}

tasks.withType(JavaCompile).configureEach {
    // Minecraft 1.18 (1.18-pre2) upwards uses Java 17.
    it.options.release = 17
}

java {
    // Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
    // if it is present.
    // If you remove this line, sources will not be generated.
    withSourcesJar()

    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
}

jar {
    from("LICENSE") {
        rename { "${it}_${base.archivesName.get()}"}
    }
}

kotlin {
    jvmToolchain(21)
}

machete {
    enabled = true
    keepOriginal = true
}

compileKotlin.kotlinOptions.jvmTarget = "17"